{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pil",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#include"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.col.pil",
				"match": "\\b(private|col|witness|fixed|public\\s+table|public|proof\\s+value|subproof\\s+value|air\\s+value|aggregate|instance|stage|challenge|constant|args|last|first|frame|not)\\b"
			},
			{
				"name": "keyword.types.pil",
				"match": "\\b(fe|int|string|expr)\\b"
			},
			{
				"name": "keyword.block.pil",
				"match": "\\b(namespace)\\b"
			},
            {
				"name": "keyword.function.pil",
				"match": "\\b(function|return)\\b"
			},
            {
				"name": "keyword.control.pil",
				"match": "\\b(if|else|for|in|while|do|break|continue|switch|case|when|once|final|air|proof|subproof|on|scope|global|persistent)\\b"
			}]
		},
		"strings": {
            "patterns": [{
                "name": "string.quoted.double.pil",
                "begin": "\"",
                "end": "\"",
                "patterns": [
                    {
                        "name": "constant.character.escape.pil",
                        "match": "\\\\."
                    }
                ]
            },{
                "name": "string.interpolated",
                "begin": "\\`",
                "end": "\\`"
            }]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.pil",
					"begin": "(\\/\\*)",
					"end": "(\\*\\/)"
				},
				{
					"match": "\\/\\/.*n?",
					"name": "comment.line.pil"
				}
			]
		},
		"numbers": {
            "patterns": [ {
                    "match": "\\b([0-9][0-9_]*n?)\\b",
                    "name": "constant.numeric.decimal.pil"
                },
                {
                    "match": "\\b(0x[0-9A-Fa-f][0-9A-Fa-f_]*n?)\\b",
                    "name": "constant.numeric.hexadecimal.pil"
                }
            ]
		},
		"operators": {
			"patterns": [
				{
					"match": "===",
					"name": "keyword.operator.constraint.pil"
				},
				{
					"match": "==",
					"name": "keyword.operator.assignment.pil"
				},
                {
					"match": "\\.\\.\\+\\.\\.",
					"name": "keyword.operator.range.series.arithmetic.pil"
				},
				{
					"match": "\\.\\.\\*\\.\\.",
					"name": "keyword.operator.range.series.geometric.pil"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.range.fill.pil"
				},
				{
					"match": "\\.\\.",
					"name": "keyword.operator.range.pil"
				},
                {
					"match": "\\*|-|\\+",
					"name": "keyword.operator.pil"
				}
			]
		},
        "include": {
            "patterns": [{
                "name": "meta.preprocessor.include.pil",
                "match": "\\b(include)\\b\\s*\"[^\"]+\""
            }]
        },
		"identifiers": {
			"patterns": [{
                "name": "variable.reference.pil",
                "match": "(\\&[a-zA-Z_][a-zA-Z$_0-9]*)\\b"
            },
            {
				"name": "decorator.metadata.pil",
				"match": "@[a-zA-Z_][a-zA-Z$_0-9]*"
			},
            {
				"name": "variable.pil",
				"match": "\\b([a-zA-Z_][a-zA-Z$_0-9]*)\\b"
			}
            ]
		}
	},
	"scopeName": "source.pil"
}